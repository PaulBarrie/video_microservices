version: '3.4'

services:
  app:
    build:
      context: ./app
      args:
        HOST: 0.0.0.0
        PORT: 5000
        API_URL: http://api:3000/
    command: npm run docker
    ports:
      - ${APP_PORT}:${APP_PORT}
    restart: on-failure
    volumes:
      - ./app:/usr/src/app
    working_dir: /usr/src/app
    networks: 
      - frontend
      - search
    container_name: myyt-app

  #service for yt api
  api:
    build:
      context: ./api
    volumes:
        - ./api:/go/src/api 

    env_file: 
       - .env
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on: 
      - msql
      - minio
      - smtp
    networks: 
      - backend
      - frontend
    command: bash -c "go run main.go"
    container_name: ${API_CONTAINER}

  #service for database
  msql:
    build:
      context: ./Docker/MySQL
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PWD}
      MYSQL_DATABASE: ${DB_NAME}
      # MYSQL_USER: ${DB_USER}
      # MYSQL_PASSWORD: ${DB_USER_PWD}
    ports:
      - "${DB_PORT}:3306"    
    networks: 
       - backend
       - search
    volumes: 
      - ./Data/mysql:/var/lib/mysql
      - ./Docker/MySQL:/etc/mysql/conf.d

    command: --wait-timeout=28800
    container_name: ${MYSQL_CONTAINER}
    hostname: msql

  minio:
    image: minio/minio
    ports:
        - "9999:9000"
    env_file: minio.env
    volumes:
        - ./Data/videos_store:/export
    command: minio server /export
    container_name: ${MINIO_CONTAINER}
    networks:
      backend:
        aliases: 
          - ${MINIO_CONTAINER}
    container_name: ${MINIO_CONTAINER}
    
  video_encoder:
    build:  
      context: ./video_encoder
    depends_on: 
      - minio
    volumes:
      - ./video_encoder:/home/api 
      - ./Data/videos_store:/home/videos_store 
    env_file: 
       - .env
    ports:
      - "${ENCODER_PORT}:${ENCODER_PORT}"
    depends_on:
      - minio
      - api
    #restart: unless-stopped
    networks: 
      - backend
    working_dir: /go/src/api
    command: bash -c "go run main.go"
    container_name: myyt-encoder

  smtp:
    image: djfarrelly/maildev
    ports:
      - "1080:80"
      - "1025:1025"
    container_name: ${SMTP_CONTAINER}
    command: bin/maildev --web 80 --smtp 25 --hide-extensions STARTTLS
    environment:
      - "MAILDEV_OUTGOING_USER=${SMTP_USER}"
      - "MAILDEV_OUTGOING_PASS=${SMTP_PASSWORD}"
      - "MAILDEV_OUTGOING_SECURE=false"
    networks: 
      - backend

  logstash:
    build:
      context: ./Docker/Logstash
    volumes:
      - type: bind
        source: ./Docker/Logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./Docker/Logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    restart: on-failure
    command: bin/logstash -f /opt/logstash/pipeline/logstash.conf
    depends_on: 
      - elasticsearch
      - msql
    ports:
      - "9600:9600"
      - "7777:7777"
    networks:
      - search
    container_name: logstash


  elasticsearch:
    image: elasticsearch:6.8.9
    ports:
      - "9200:9200"
    networks:
      - frontend
      - search
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    volumes:
      - type: bind
        source: ./Data/elasticsearch
        target: /usr/share/elasticsearch/data
      # - ./Docker/Elasticsearch/es-conf.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    container_name: elasticsearch

  kibana:
    image: kibana:6.8.9
    networks:
      - search
    restart: on-failure
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:${ELASTICSEARCH_HOST_HTTP_PORT}
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601
    container_name: kibana

  #service for adminer
  adminer:
    image: adminer
    restart: on-failure
    depends_on:
      - msql
    ports:
      - 8000:8080
    container_name: adminer

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
  search:
    driver: bridge

