version: '3.4'

services:

  #service for yt api
  api:
    build:
      context: ./api
    volumes:
        - ./api:/go/src/api 

    env_file: 
       - .env
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on: 
      - msql
      - minio
      - smtp
    networks: 
      - backend
      - frontend
    command: bash -c "go run main.go"
    container_name: ${API_CONTAINER}

  #service for database
  msql:
    build:
      context: ./Docker/MySQL
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PWD}
      MYSQL_DATABASE: ${DB_NAME}
      # MYSQL_USER: ${DB_USER}
      # MYSQL_PASSWORD: ${DB_USER_PWD}
    ports:
      - "3308:3306"    
    networks: 
       - backend
    volumes: 
      - ./Data/mysql:/var/lib/mysql
      - ./Docker/MySQL/mysql.cnf:/etc/mysql/conf.d/mysql.cnf

    command: --wait-timeout=28800
    container_name: ${MYSQL_CONTAINER}
  
  minio:
    image: minio/minio
    ports:
        - "9999:9000"
    env_file: minio.env
    volumes:
        - ./Data/videos_store:/export
    command: minio server /export
    container_name: ${MINIO_CONTAINER}
    networks:
      backend:
        aliases: 
          - ${MINIO_CONTAINER}
    container_name: ${MINIO_CONTAINER}
      
  #service for SMTP
  smtp:
    build: ./Docker/Smtp
    environment: 
      MTP_HOST: ${SMTP_DOMAIN}
      MTP_USER: ${SMTP_USER}
      MTP_PASS: ${SMTP_PASSWORD}
    ports: 
      - ${SMTP_PORT}:${SMTP_PORT}
    networks: 
      - backend
    container_name: ${SMTP_CONTAINER}
    
  video_encoder:
    build:  
      context: ./video_encoder
    depends_on: 
      - minio
    volumes:
      - ./video_encoder:/home/api 
      - ./Data/videos_store:/home/videos_store 
    env_file: 
       - .env
    ports:
      - "${ENCODER_PORT}:${ENCODER_PORT}"
    depends_on:
      - minio
      - api
    #restart: unless-stopped
    networks: 
      - backend
    working_dir: /go/src/api
    command: bash -c "go run main.go"
    container_name: myyt-encoder
  
  # SERVICES FOR DEV 
  # maildev:
  #   image: maildev/maildev
  #   ports:
  #     - "1080:80"
  #   container_name: ${SMTP_CONTAINER}
  

  # SEARCH ENGINE SERVICES
  #event streamer
  debezium:
    image: debezium/zookeeper:1.3
    environment:
      SERVER_ID: 1

    ports:
      - 2181:2181
      - 2888:2888
      - 3838:3838
    container_name: debezium

  #stream-processing
  kafka: 
    image: debezium/kafka
    ports:
      - 9092:9092
    environment:
      BROKER_ID: 2
      ZOOKEEPER_CONNECT: debezium:2181
      # LOG_LEVEL: ERROR
    links:
      - debezium:debezium


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    environment:
      discovery.type=single-node
    ports:
      - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
      - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
    container_name:  ${ES_CONTAINER}

  kibana:
    image: docker.elastic.co/kibana/kibana:7.9.3
    depends_on: 
      - elasticsearch
    restart: on-failure
    environment:
      SERVER_NAME: kibana.example.org
      ELASTICSEARCH_HOSTS: http://${ES_CONTAINER}:${ELASTICSEARCH_HOST_HTTP_PORT}
    ports:
      - 5601:5601
  #service for adminer
  adminer:
    image: adminer:4.7
    depends_on:
      - msql
    environment:
      ADMINER_DEFAULT_DB_DRIVER: mysql
      ADMINER_DEFAULT_DB_HOST: ${DB_ADDRESS}
      ADMINER_DEFAULT_DB_NAME: ${DB_NAME}
      ADMINER_DESIGN: nette
      ADMINER_PLUGINS: tables-filter tinymce
    ports:
      - ${ADMINER_PORT}:${ADMINER_PORT}
    

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
